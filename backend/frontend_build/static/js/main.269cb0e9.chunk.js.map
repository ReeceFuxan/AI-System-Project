{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","papers","setPapers","useState","searchQuery","setSearchQuery","searchResults","setSearchResults","useEffect","fetchPapers","async","response","axios","get","data","error","console","React","createElement","type","placeholder","value","onChange","e","target","onClick","params","query","results","map","paper","key","ID","Title","Author","id","title","author","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"yNAuEeA,MAlEf,WACI,MAAOC,EAAQC,GAAaC,mBAAS,KAC9BC,EAAaC,GAAkBF,mBAAS,KACxCG,EAAeC,GAAoBJ,mBAAS,IAGnDK,oBAAU,KACNC,KACD,IAEH,MAAMA,EAAcC,UAChB,IACI,MAAMC,QAAiBC,IAAMC,IAAI,qCACjCX,EAAUS,EAASG,KAAKb,QAC1B,MAAOc,GACLC,QAAQD,MAAM,yBAA0BA,KAehD,OACIE,IAAAC,cAAA,WACID,IAAAC,cAAA,UAAI,4CAGJD,IAAAC,cAAA,SACIC,KAAK,OACLC,YAAY,mBACZC,MAAOjB,EACPkB,SAAWC,GAAMlB,EAAekB,EAAEC,OAAOH,SAE7CJ,IAAAC,cAAA,UAAQO,QAtBKf,UACjB,IACI,MAAMC,QAAiBC,IAAMC,IAAI,sCAAiC,CAC9Da,OAAQ,CAAEC,MAAOvB,KAErBG,EAAiBI,EAASG,KAAKc,SACjC,MAAOb,GACLC,QAAQD,MAAM,0BAA2BA,MAeV,UAG/BE,IAAAC,cAAA,UAAI,kBACJD,IAAAC,cAAA,UACKZ,EAAcuB,IAAKC,GAChBb,IAAAC,cAAA,MAAIa,IAAKD,EAAME,IACXf,IAAAC,cAAA,cAASY,EAAMG,OAAe,OAAKH,EAAMI,UAMrDjB,IAAAC,cAAA,UAAI,cACJD,IAAAC,cAAA,UACKjB,EAAO4B,IAAKC,GACTb,IAAAC,cAAA,MAAIa,IAAKD,EAAMK,IACXlB,IAAAC,cAAA,cAASY,EAAMM,OAAe,OAAKN,EAAMO,YCnDlDC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHnC,IAAAC,cAACD,IAAMoC,WAAU,KACfpC,IAAAC,cAAClB,EAAG,QAORsC,M","file":"static/js/main.269cb0e9.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst API_BASE_URL = \"http://127.0.0.1:8000\"; // Update if using a different backend URL\n\nfunction App() {\n    const [papers, setPapers] = useState([]);\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [searchResults, setSearchResults] = useState([]);\n\n    // Fetch list of papers on component mount\n    useEffect(() => {\n        fetchPapers();\n    }, []);\n\n    const fetchPapers = async () => {\n        try {\n            const response = await axios.get(`${API_BASE_URL}/list_papers`);\n            setPapers(response.data.papers);\n        } catch (error) {\n            console.error(\"Error fetching papers:\", error);\n        }\n    };\n\n    const searchPapers = async () => {\n        try {\n            const response = await axios.get(`${API_BASE_URL}/search_papers`, {\n                params: { query: searchQuery },\n            });\n            setSearchResults(response.data.results);\n        } catch (error) {\n            console.error(\"Error searching papers:\", error);\n        }\n    };\n\n    return (\n        <div>\n            <h1>AI-Powered Research Paper Recommendation</h1>\n\n            {/* Search Bar */}\n            <input\n                type=\"text\"\n                placeholder=\"Search papers...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n            />\n            <button onClick={searchPapers}>Search</button>\n\n            {/* Search Results */}\n            <h2>Search Results</h2>\n            <ul>\n                {searchResults.map((paper) => (\n                    <li key={paper.ID}>\n                        <strong>{paper.Title}</strong> by {paper.Author}\n                    </li>\n                ))}\n            </ul>\n\n            {/* List of Papers */}\n            <h2>All Papers</h2>\n            <ul>\n                {papers.map((paper) => (\n                    <li key={paper.id}>\n                        <strong>{paper.title}</strong> by {paper.author}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}